AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Notemag AWS cloudformation infrastructure definition

Parameters:
  apiGatewayName:
    Type: String
    Default: notemag-api
  apiGatewayStageName:
    Type: String
    AllowedPattern: "[a-z0-9]+"
    Default: beta
#  apiGatewayHTTPMethod:
#    Type: String
#    Default: POST
  addLambdaFunctionName:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Default: UploadLambda
  getLambdaFunctionName:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Default: getNotesLambda
  deleteLambdaFunctionName:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Default: deleteNoteLambda

Resources:

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      BinaryMediaTypes:
        - '*/*'
      Description: An API Gateway with a Lambda Integration

      EndpointConfiguration:
        Types:
          - EDGE #REGIONAL
      Name: lambda-api

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'lambda'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodGetter:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UploadLambda.Arn}/invocations'
      OperationName: 'lambda'
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref ApiGatewayRestApi
      Schema: {}

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      Description: Lambda API Stage v0
      RestApiId: !Ref ApiGatewayRestApi
      StageName: 'v0'

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethodGetter
    Properties:
      Description: Lambda API Deployment
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccessGet
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt UploadLambda.Arn

  UploadLambda:
    Type: AWS::Serverless::Function
    Properties:
#      Code:
#        S3Bucket: lambda-handlers-codes
#        S3Key: magProject.zip
#      Description: AWS Lambda function
      FunctionName: UploadImageLambda
      Handler: AddLambdaHandler::handleRequest
      Runtime: java11
      CodeUri: ../../target/notemag.zip
      MemorySize: 256
      Role: !GetAtt ProcessingLambdaExecutionRole.Arn
      Timeout: 60

  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt UploadLambda.Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::lambda-handlers-codes'


  ProcessingLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: allowLogging
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*
        - PolicyName: getAndDeleteObjects
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - '*'
                Resource: arn:aws:s3:::lambda-handlers-codes/*

  ImagesBucket:
    Type: AWS::S3::Bucket
    DependsOn:
      - UploadLambdaPermission
    Properties:
      BucketName: images-buckett
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt UploadLambda.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .txt

#  UploadLambdaPermission:
#    Type: AWS::Lambda::Permission
#    Properties:
#      Action: 'lambda:InvokeFunction'
#      FunctionName: !Ref UploadLambda
#      Principal: s3.amazonaws.com
#      SourceArn: !Sub 'arn:aws:s3:::images-buckett'
#      SourceAccount: !Ref AWS::AccountId

#    ProcessingLambdaExecutionRole: #IAM dla lambdy
#      Type: AWS::IAM::Role
#      Properties:
#        AssumeRolePolicyDocument:
#          Version: '2012-10-17'
#          Statement:
#            - Effect: Allow
#              Principal:
#                Service:
#                  - lambda.amazonaws.com
#              Action:
#                - sts:AssumeRole
#        Policies:
#          - PolicyName: allowLogging
#            PolicyDocument:
#              Version: '2012-10-17'
#              Statement:
#                - Effect: Allow
#                  Action:
#                    - logs:*
#                  Resource: arn:aws:logs:*:*:*
#          - PolicyName: getAndDeleteObjects
#            PolicyDocument:
#              Version: '2012-10-17'
#              Statement:
#                - Effect: Allow
#                  Action:
#                    - s3:GetObject
#                    - s3:DeleteObject
#                  Resource: !Sub 'arn:aws:s3:::images-bucket/*'

