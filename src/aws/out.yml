AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Notemag AWS cloudformation infrastructure definition
Resources:
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      BinaryMediaTypes:
      - '*/*'
      Description: An API Gateway with a Lambda Integration
      EndpointConfiguration:
        Types:
        - EDGE
      Name: lambda-api
  ApiGatewayResourceImage:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: image
      RestApiId:
        Ref: ApiGatewayRestApi
  ApiGatewayResourceNote:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: note
      RestApiId:
        Ref: ApiGatewayRestApi
  ApiGatewayMethodUpload:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        ConnectionType: INTERNET
        Credentials:
          Fn::GetAtt:
          - ApiGatewayIamRole
          - Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UploadLambda.Arn}/invocations
      OperationName: lambda
      ResourceId:
        Ref: ApiGatewayResourceImage
      RestApiId:
        Ref: ApiGatewayRestApi
  ApiGatewayMethodGetNoteByKey:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        ConnectionType: INTERNET
        Credentials:
          Fn::GetAtt:
          - ApiGatewayIamRole
          - Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetLambda.Arn}/invocations
      OperationName: lambda
      ResourceId:
        Ref: ApiGatewayResourceNote
      RestApiId:
        Ref: ApiGatewayRestApi
  ApiGatewayMethodGetImageByKey:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        ConnectionType: INTERNET
        Credentials:
          Fn::GetAtt:
          - ApiGatewayIamRole
          - Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetImageLambda.Arn}/invocations
      OperationName: lambda
      ResourceId:
        Ref: ApiGatewayResourceImage
      RestApiId:
        Ref: ApiGatewayRestApi
  ApiGatewayMethodGetAll:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        ConnectionType: INTERNET
        Credentials:
          Fn::GetAtt:
          - ApiGatewayIamRole
          - Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAllLambda.Arn}/invocations
      OperationName: lambda
      ResourceId:
        Fn::GetAtt:
        - ApiGatewayRestApi
        - RootResourceId
      RestApiId:
        Ref: ApiGatewayRestApi
  ApiGatewayMethodDelete:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: DELETE
      Integration:
        ConnectionType: INTERNET
        Credentials:
          Fn::GetAtt:
          - ApiGatewayIamRole
          - Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteLambda.Arn}/invocations
      OperationName: lambda
      ResourceId:
        Ref: ApiGatewayResourceNote
      RestApiId:
        Ref: ApiGatewayRestApi
  ApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      RestApiId:
        Ref: ApiGatewayRestApi
      Schema: {}
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId:
        Ref: ApiGatewayDeployment
      Description: NoteMag API Stage v1
      RestApiId:
        Ref: ApiGatewayRestApi
      StageName: v1
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
    - ApiGatewayMethodUpload
    - ApiGatewayMethodGetNoteByKey
    - ApiGatewayMethodGetAll
    - ApiGatewayMethodGetImageByKey
    - ApiGatewayMethodDelete
    Properties:
      Description: Lambda API Deployment
      RestApiId:
        Ref: ApiGatewayRestApi
  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: LambdaAccessGet
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: lambda:*
            Resource: '*'
  UploadLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: UploadLambda
      Handler: UploadLambda::handleRequest
      Runtime: java11
      CodeUri: s3://lambda-handlers-codes/acbc0bf196b734d9bf5ce33e9fd28141
      MemorySize: 256
      Role:
        Fn::GetAtt:
        - ProcessingLambdaExecutionRole
        - Arn
      Timeout: 60
  UploadLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: UploadLambda
      Principal: s3.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:s3:::images-s3
      SourceAccount:
        Ref: AWS::AccountId
  ProcessingLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: allowLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
      - PolicyName: getAndDeleteObjects
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - '*'
            Resource: arn:aws:s3:::images-s3/*
  ProcessImageLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ProcessImageLambda
      Handler: ProcessLambda::handleRequest
      Runtime: java11
      CodeUri: s3://lambda-handlers-codes/acbc0bf196b734d9bf5ce33e9fd28141
      MemorySize: 512
      Role:
        Fn::GetAtt:
        - ProcessImageLambdaIAMRole
        - Arn
      Timeout: 120
  ProcessImageLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - ProcessImageLambda
        - Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount:
        Ref: AWS::AccountId
      SourceArn:
        Fn::Sub: arn:aws:s3:::images-s3
  ProcessImageLambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - s3:GetBucketNotification
            - s3:PutBucketNotification
            Resource:
              Fn::Sub: arn:aws:s3:::images-s3
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
      - PolicyName: allowLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
      - PolicyName: getAndDeleteObjects
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:DeleteObject
            Resource:
              Fn::Sub: arn:aws:s3:::images-s3/*
      - PolicyName: allowPutToDynamo
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:Update*
            - dynamodb:PutItem*
            Resource: arn:aws:dynamodb:eu-west-1:462503996016:table/ParsedImages
      - PolicyName: rekognitionText
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - rekognition:DetectText
            - rekognition:GetTextDetection
            Resource: '*'
  GetLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetLambda
      Handler: GetLambda::handleRequest
      Runtime: java11
      CodeUri: s3://lambda-handlers-codes/acbc0bf196b734d9bf5ce33e9fd28141
      MemorySize: 256
      Role:
        Fn::GetAtt:
        - GetLambdaExecutionRole
        - Arn
      Timeout: 60
  GetLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: allowLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
      - PolicyName: getAndDeleteObjects
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - '*'
            Resource: arn:aws:s3:::images-s3/*
      - PolicyName: allowReadActions
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:GetItem
            - dynamodb:BatchGetItem
            - dynamodb:Scan
            - dynamodb:Query
            Resource: arn:aws:dynamodb:eu-west-1:462503996016:table/ParsedImages
  GetImageLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetImageLambda
      Handler: GetImageLambda::handleRequest
      Runtime: java11
      CodeUri: s3://lambda-handlers-codes/acbc0bf196b734d9bf5ce33e9fd28141
      MemorySize: 256
      Role:
        Fn::GetAtt:
        - GetImageLambdaExecutionRole
        - Arn
      Timeout: 60
  GetImageLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: allowLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
      - PolicyName: getAndDeleteObjects
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - '*'
            Resource: arn:aws:s3:::images-s3/*
  GetAllLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetAllLambda
      Handler: GetAllLambda::handleRequest
      Runtime: java11
      CodeUri: s3://lambda-handlers-codes/acbc0bf196b734d9bf5ce33e9fd28141
      MemorySize: 256
      Role:
        Fn::GetAtt:
        - GetAllLambdaExecutionRole
        - Arn
      Timeout: 60
  GetAllLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: allowLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
      - PolicyName: allowReadActions
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:GetItem
            - dynamodb:BatchGetItem
            - dynamodb:Scan
            - dynamodb:Query
            Resource: arn:aws:dynamodb:eu-west-1:462503996016:table/ParsedImages
  DeleteLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DeleteLambda
      Handler: DeleteLambda::handleRequest
      Runtime: java11
      CodeUri: s3://lambda-handlers-codes/acbc0bf196b734d9bf5ce33e9fd28141
      MemorySize: 256
      Role:
        Fn::GetAtt:
        - DeleteLambdaExecutionRole
        - Arn
      Timeout: 60
  DeleteLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: allowLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
      - PolicyName: getAndDeleteObjects
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - '*'
            Resource: arn:aws:s3:::images-s3/*
      - PolicyName: allowDeleteActions
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:DeleteItem
            Resource: arn:aws:dynamodb:eu-west-1:462503996016:table/ParsedImages
  ImagesBucket:
    Type: AWS::S3::Bucket
    DependsOn:
    - UploadLambdaPermission
    Properties:
      BucketName: images-s3
      NotificationConfiguration:
        LambdaConfigurations:
        - Event: s3:ObjectCreated:*
          Function:
            Fn::GetAtt:
            - ProcessImageLambda
            - Arn
  DDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ParsedImages
      AttributeDefinitions:
      - AttributeName: userId
        AttributeType: S
      - AttributeName: imageName
        AttributeType: S
      KeySchema:
      - AttributeName: userId
        KeyType: HASH
      - AttributeName: imageName
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  WriteCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 20
      MinCapacity: 1
      ResourceId:
        Fn::Join:
        - /
        - - table
          - Ref: DDBTable
      RoleARN:
        Fn::GetAtt:
        - ScalingRole
        - Arn
      ScalableDimension: dynamodb:table:WriteCapacityUnits
      ServiceNamespace: dynamodb
  ReadCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 20
      MinCapacity: 1
      ResourceId:
        Fn::Join:
        - /
        - - table
          - Ref: DDBTable
      RoleARN:
        Fn::GetAtt:
        - ScalingRole
        - Arn
      ScalableDimension: dynamodb:table:ReadCapacityUnits
      ServiceNamespace: dynamodb
  ReadScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ReadAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: ReadCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBReadCapacityUtilization
  WriteScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ReadAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: WriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization
  ScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - application-autoscaling.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:DescribeTable
            - dynamodb:UpdateTable
            - cloudwatch:PutMetricAlarm
            - cloudwatch:DescribeAlarms
            - cloudwatch:GetMetricStatistics
            - cloudwatch:SetAlarmState
            - cloudwatch:DeleteAlarms
            Resource: '*'
