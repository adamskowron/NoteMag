AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Notemag AWS cloudformation infrastructure definition
Parameters:
  apiGatewayName:
    Type: String
    Default: notemag-api
  apiGatewayStageName:
    Type: String
    AllowedPattern: '[a-z0-9]+'
    Default: beta
  addLambdaFunctionName:
    Type: String
    AllowedPattern: '[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+'
    Default: UploadLambda
  getLambdaFunctionName:
    Type: String
    AllowedPattern: '[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+'
    Default: getNotesLambda
  deleteLambdaFunctionName:
    Type: String
    AllowedPattern: '[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+'
    Default: deleteNoteLambda
Resources:
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      BinaryMediaTypes:
      - '*/*'
      Description: An API Gateway with a Lambda Integration
      EndpointConfiguration:
        Types:
        - EDGE
      Name: lambda-api
  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: lambda
      RestApiId:
        Ref: ApiGatewayRestApi
  ApiGatewayMethodGetter:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        ConnectionType: INTERNET
        Credentials:
          Fn::GetAtt:
          - ApiGatewayIamRole
          - Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UploadLambda.Arn}/invocations
      OperationName: lambda
      ResourceId:
        Ref: ApiGatewayResource
      RestApiId:
        Ref: ApiGatewayRestApi
  ApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      RestApiId:
        Ref: ApiGatewayRestApi
      Schema: {}
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId:
        Ref: ApiGatewayDeployment
      Description: Lambda API Stage v0
      RestApiId:
        Ref: ApiGatewayRestApi
      StageName: v0
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethodGetter
    Properties:
      Description: Lambda API Deployment
      RestApiId:
        Ref: ApiGatewayRestApi
  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: LambdaAccessGet
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: lambda:*
            Resource:
              Fn::GetAtt:
              - UploadLambda
              - Arn
  UploadLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: UploadLambda
      Handler: AddLambdaHandler::handleRequest
      Runtime: java11
      CodeUri: s3://lambda-handlers-codes/df4b1b5cb752c942c7da80495c190e24
      MemorySize: 256
      Role:
        Fn::GetAtt:
        - ProcessingLambdaExecutionRole
        - Arn
      Timeout: 60
  UploadLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: UploadLambda
      Principal: s3.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:s3:::images-s3
      SourceAccount:
        Ref: AWS::AccountId
  ProcessingLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: allowLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
      - PolicyName: getAndDeleteObjects
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - '*'
            Resource: arn:aws:s3:::images-s3/*
  ProcessImageLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ProcessImageLambda
      Handler: GetTextLambda::handleRequest
      Runtime: java11
      CodeUri: s3://lambda-handlers-codes/df4b1b5cb752c942c7da80495c190e24
      MemorySize: 512
      Role:
        Fn::GetAtt:
        - ProcessImageLambdaIAMRole
        - Arn
      Timeout: 120
  ProcessImageLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - ProcessImageLambda
        - Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount:
        Ref: AWS::AccountId
      SourceArn:
        Fn::Sub: arn:aws:s3:::images-s3
  ProcessImageLambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - s3:GetBucketNotification
            - s3:PutBucketNotification
            Resource:
              Fn::Sub: arn:aws:s3:::images-s3
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
      - PolicyName: allowLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
      - PolicyName: getAndDeleteObjects
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:DeleteObject
            Resource:
              Fn::Sub: arn:aws:s3:::images-s3/*
      - PolicyName: allowPutToDynamo
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:Update*
            - dynamodb:PutItem*
            Resource: arn:aws:dynamodb:eu-west-1:462503996016:table/ParsedImages
      - PolicyName: rekognitionText
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - rekognition:DetectText
            - rekognition:GetTextDetection
            Resource: '*'
  GetLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetLambda
      Handler: GetLambdaHandler::handleRequest
      Runtime: java11
      CodeUri: s3://lambda-handlers-codes/df4b1b5cb752c942c7da80495c190e24
      MemorySize: 256
      Role:
        Fn::GetAtt:
        - GetLambdaExecutionRole
        - Arn
      Timeout: 60
  GetLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: allowLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
      - PolicyName: getAndDeleteObjects
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - '*'
            Resource: arn:aws:s3:::images-s3/*
      - PolicyName: allowReadActions
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:GetItem
            - dynamodb:BatchGetItem
            - dynamodb:Scan
            - dynamodb:Query
            Resource: arn:aws:dynamodb:eu-west-1:462503996016:table/ParsedImages
  ImagesBucket:
    Type: AWS::S3::Bucket
    DependsOn:
    - UploadLambdaPermission
    Properties:
      BucketName: images-s3
      NotificationConfiguration:
        LambdaConfigurations:
        - Event: s3:ObjectCreated:*
          Function:
            Fn::GetAtt:
            - ProcessImageLambda
            - Arn
  DDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ParsedImages
      AttributeDefinitions:
      - AttributeName: userId
        AttributeType: S
      - AttributeName: imageName
        AttributeType: S
      KeySchema:
      - AttributeName: userId
        KeyType: HASH
      - AttributeName: imageName
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
